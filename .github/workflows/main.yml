name: CI

on: [pull_request]

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: rustfmt
            override: true
      - name: rustfmt
        run: cargo fmt -- --check
      - name: black (Python linter)
        run: pip install black && black --check tests/

  unit_tests:
    needs: linter
    strategy:
      matrix:
        toolchain:
          - 1.43
          - nightly
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.toolchain }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
          profile: minimal
      - name: Test on Rust ${{ matrix.toolchain }}
        run: cargo test --verbose --color always -- --nocapture

  compile:
    needs: linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
      - name: Build revaultd release binary
        run: cargo build --release
      - name: Build the servers
        run: |
          set -x
          git submodule update --init
          cd tests/servers/coordinatord && cargo build && cd ../../../
          cd tests/servers/cosignerd && cargo build && cd ../../../
      - name: Pack everything up
        run: |
          mkdir binaries
          mv target/release/revaultd binaries/
          mv tests/servers/coordinatord/target/debug/main binaries/coordinatord
          mv tests/servers/cosignerd/target/debug/cosignerd binaries/
      - name: Upload the binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: ./binaries

  functional_tests:
    needs: compile
    strategy:
      matrix:
        test_file:
          - tests/test_chain.py
          - tests/test_misc.py
          - tests/test_rpc.py
          #- tests/test_spend.py
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Download the binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: ./binaries
      - run: chmod +x binaries/*
      - name: Run functional tests
        run: |
          set -xe

          # Download the bitcoind binary
          BITCOIND_VERSION="22.0"
          DIR_NAME="bitcoin-$BITCOIND_VERSION"
          ARCHIVE_NAME="$DIR_NAME.tar.gz"
          curl https://bitcoincore.org/bin/bitcoin-core-$BITCOIND_VERSION/bitcoin-$BITCOIND_VERSION-x86_64-linux-gnu.tar.gz -o $ARCHIVE_NAME
          tar -xzf $ARCHIVE_NAME
          BITCOIND_PATH=$DIR_NAME/bin/bitcoind

          # Setup the postgres instance for the servers
          sudo apt update && sudo apt install postgresql-12
          sudo systemctl start postgresql
          sudo su -c "psql -c \"CREATE ROLE test CREATEDB LOGIN PASSWORD 'test'\"" - postgres

          # Run the functional tests
          python3 -m venv venv
          . venv/bin/activate
          pip install -r tests/requirements.txt
          BITCOIND_PATH=$BITCOIND_PATH POSTGRES_USER="test" POSTGRES_PASS="test" pytest -vvv ${{ matrix.test_file }}
        env:
          REVAULTD_PATH: ./binaries/revaultd
          COORDINATORD_PATH: ./binaries/coordinatord
          COSIGNERD_PATH: ./binaries/cosignerd
          EXECUTOR_WORKERS: 1
          VERBOSE: 1
          LOG_LEVEL: debug
          TIMEOUT: 180
